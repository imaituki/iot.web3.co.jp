<?php  if ( ! defined('BASEPATH')) exit('No direct script access allowed');

// --------------------------------------------------------------------

global $JAPAN_HOLIDAY_ARRAY;

$JAPAN_HOLIDAY_ARRAY = array(
'2012-01-01'=>'元日',
'2012-01-02'=>'振替休日',
'2012-01-09'=>'成人の日',
'2012-02-11'=>'建国記念の日',
'2012-03-20'=>'春分の日',
'2012-04-29'=>'昭和の日',
'2012-04-30'=>'振替休日',
'2012-05-03'=>'憲法記念日',
'2012-05-04'=>'みどりの日',
'2012-05-05'=>'こどもの日',
'2012-07-16'=>'海の日',
'2012-09-17'=>'敬老の日',
'2012-09-22'=>'秋分の日',
'2012-10-08'=>'体育の日',
'2012-11-03'=>'文化の日',
'2012-11-23'=>'勤労感謝の日',
'2012-12-23'=>'天皇誕生日',
'2012-12-24'=>'振替休日',

'2013-01-01'=>'元日',
'2013-01-14'=>'成人の日',
'2013-02-11'=>'建国記念の日',
'2013-03-20'=>'春分の日',
'2013-04-29'=>'昭和の日',
'2013-05-03'=>'憲法記念日',
'2013-05-04'=>'みどりの日',
'2013-05-05'=>'こどもの日',
'2013-05-06'=>'振替休日',
'2013-07-15'=>'海の日',
'2013-09-16'=>'敬老の日',
'2013-09-23'=>'秋分の日',
'2013-10-14'=>'体育の日',
'2013-11-03'=>'文化の日',
'2013-11-04'=>'振替休日',
'2013-11-23'=>'勤労感謝の日',
'2013-12-23'=>'天皇誕生日',

'2014-01-01'=>'元日',
'2014-01-13'=>'成人の日',
'2014-02-11'=>'建国記念の日',
'2014-03-21'=>'春分の日',
'2014-04-29'=>'昭和の日',
'2014-05-03'=>'憲法記念日',
'2014-05-04'=>'みどりの日',
'2014-05-05'=>'こどもの日',
'2014-05-06'=>'振替休日',
'2014-07-21'=>'海の日',
'2014-09-15'=>'敬老の日',
'2014-09-23'=>'秋分の日',
'2014-10-13'=>'体育の日',
'2014-11-03'=>'文化の日',
'2014-11-23'=>'勤労感謝の日',
'2014-11-24'=>'振替休日',
'2014-12-23'=>'天皇誕生日',

'2015-01-01'=>'元日',
'2015-01-12'=>'成人の日',
'2015-02-11'=>'建国記念の日',
'2015-03-21'=>'春分の日',
'2015-04-29'=>'昭和の日',
'2015-05-03'=>'憲法記念日',
'2015-05-04'=>'みどりの日',
'2015-05-05'=>'こどもの日',
'2015-05-06'=>'振替休日',
'2015-07-20'=>'海の日',
'2015-09-21'=>'敬老の日',
'2015-09-22'=>'国民の休日',
'2015-09-23'=>'秋分の日',
'2015-10-12'=>'体育の日',
'2015-11-03'=>'文化の日',
'2015-11-23'=>'勤労感謝の日',
'2015-12-23'=>'天皇誕生日',

'2016-01-01'=>'元日',
'2016-01-11'=>'成人の日',
'2016-02-11'=>'建国記念の日',
'2016-03-20'=>'春分の日',
'2016-03-21'=>'振替休日',
'2016-04-29'=>'昭和の日',
'2016-05-03'=>'憲法記念日',
'2016-05-04'=>'みどりの日',
'2016-05-05'=>'こどもの日',
'2016-07-18'=>'海の日',
'2016-09-19'=>'敬老の日',
'2016-09-22'=>'秋分の日',
'2016-10-10'=>'体育の日',
'2016-11-03'=>'文化の日',
'2016-11-23'=>'勤労感謝の日',
'2016-12-23'=>'天皇誕生日',

'2017-01-01'=>'元日',
'2017-01-02'=>'振替休日',
'2017-01-09'=>'成人の日',
'2017-02-11'=>'建国記念の日',
'2017-03-20'=>'春分の日',
'2017-04-29'=>'昭和の日',
'2017-05-03'=>'憲法記念日',
'2017-05-04'=>'みどりの日',
'2017-05-05'=>'こどもの日',
'2017-07-17'=>'海の日',
'2017-09-18'=>'敬老の日',
'2017-09-23'=>'秋分の日',
'2017-10-09'=>'体育の日',
'2017-11-03'=>'文化の日',
'2017-11-23'=>'勤労感謝の日',
'2017-12-23'=>'天皇誕生日',

'2018-01-01'=>'元日',
'2018-01-08'=>'成人の日',
'2018-02-11'=>'建国記念の日',
'2018-02-12'=>'振替休日',
'2018-03-21'=>'春分の日',
'2018-04-29'=>'昭和の日',
'2018-04-30'=>'振替休日',
'2018-05-03'=>'憲法記念日',
'2018-05-04'=>'みどりの日',
'2018-05-05'=>'こどもの日',
'2018-07-16'=>'海の日',
'2018-09-17'=>'敬老の日',
'2018-09-23'=>'秋分の日',
'2018-09-24'=>'振替休日',
'2018-10-08'=>'体育の日',
'2018-11-03'=>'文化の日',
'2018-11-23'=>'勤労感謝の日',
'2018-12-23'=>'天皇誕生日',
'2018-12-24'=>'振替休日',

'2019-01-01'=>'元日',
'2019-01-14'=>'成人の日',
'2019-02-11'=>'建国記念の日',
'2019-03-21'=>'春分の日',
'2019-04-29'=>'昭和の日',
'2019-05-03'=>'憲法記念日',
'2019-05-04'=>'みどりの日',
'2019-05-05'=>'こどもの日',
'2019-05-06'=>'振替休日',
'2019-07-15'=>'海の日',
'2019-09-16'=>'敬老の日',
'2019-09-23'=>'秋分の日',
'2019-10-14'=>'体育の日',
'2019-11-03'=>'文化の日',
'2019-11-04'=>'振替休日',
'2019-11-23'=>'勤労感謝の日',
'2019-12-23'=>'天皇誕生日',

'2020-01-01'=>'元日',
'2020-01-13'=>'成人の日',
'2020-02-11'=>'建国記念の日',
'2020-03-20'=>'春分の日',
'2020-04-29'=>'昭和の日',
'2020-05-03'=>'憲法記念日',
'2020-05-04'=>'みどりの日',
'2020-05-05'=>'こどもの日',
'2020-05-06'=>'振替休日',
'2020-07-20'=>'海の日',
'2020-09-21'=>'敬老の日',
'2020-09-22'=>'秋分の日',
'2020-10-12'=>'体育の日',
'2020-11-03'=>'文化の日',
'2020-11-23'=>'勤労感謝の日',
'2020-12-23'=>'天皇誕生日'
);

/**
 *
 * 日付文字列を指定したパターンに変換します。
 * @param unknown_type $date_str
 * @param unknown_type $pattern
 */
function format_date_to_pattern($date_str, $pattern = "Y/m/d") 
{

	if (is_blank($date_str))
	{
		return '';
	}

	$ret_str = date($pattern, strtotime($date_str));

	if ($ret_str === FALSE) 
	{
		return '';
	}

	return $ret_str;
}

/**
 * 日付文字列を指定したパターンに変換します。
 * 
 * @param unknown_type $date_str
 */
function format_jpn_weekday($date_str) 
{
	if (is_blank($date_str))
	{
		return '';
	}

	$week_day_index = date('w', strtotime($date_str));

	return get_jpn_weekday($week_day_index);
}

// --------------------------------------------------------------------

/**
 * DB用にハイフン区切りの日時文字列を生成する
 * 
 * @param unknown_type $input
 * @param unknown_type $h_i_s
 */
function create_db_datetme_str($input , $h_i_s = '00:00:00')
{
	if ( ! $input)
	{
		return NULL;
	}

	if (is_blank($input))
	{
		return NULL;
	}

	if (preg_match('/^[0-9]{4}\/[0-9]{1,2}\/[0-9]{1,2}$/u', $input) === 0)
	{
		return NULL;
	}

	return str_replace("/", "-", $input) . ' ' . $h_i_s;
}

// --------------------------------------------------------------------

/**
 * 日付に何日か足した結果を取得する。時刻は00:00:00
 * 
 * @param unknown_type $add_date
 * @param unknown_type $pattern
 */
function get_add_date($add_date, $pattern = 'Y-m-d H:i:s')
{
	return date($pattern, mktime(0, 0, 0, date('m'), date('d') + $add_date, date('Y')));
}

// --------------------------------------------------------------------

/**
 * 日付に何日か足した結果をタイムスタンプで取得する。時刻は00:00:00
 * 
 * @param unknown_type $add_date
 */
function get_date_timestamp($add_date)
{
	return mktime(0, 0, 0, date('m'), date('d') + $add_date, date('Y'));
}

// --------------------------------------------------------------------

/**
 * 日本語で曜日を取得する
 * 
 * @param unknown_type $wday
 */
function get_jpn_weekday($wday)
{
	$ret = array('日','月','火','水','木','金','土');
	
	return isset($ret[$wday]) ? $ret[$wday] : '';
}

/**
 * 日付文字列から直接日本語の曜日を取得する。
 * 
 * @param unknown_type $date_str
 */
function convert_date_to_weekday($date_str, $add_text = "")
{
	$week_index = format_date_to_pattern($date_str, 'w');
	$ret = get_jpn_weekday($week_index);

	if (is_not_blank($ret))
	{
		return $ret.$add_text;
	}
	else
	{
		return '';
	}
}

// --------------------------------------------------------------------

/**
 * 指定した月の全ての日付を指定したパターンの文字列で取得する
 * 
 * @param unknown_type $year
 * @param unknown_type $month
 * @param unknown_type $date_pattern
 */
function get_month_datestr_list($year, $month, $date_pattern = '%04s/%02s/%02s')
{
	$ret_array = array();

	$target_month_last_day = date("t", mktime(0, 0, 0, $month, 1, $year));

	for ($i = 1; $i <= $target_month_last_day; $i++)
	{
		$ret_array[] = sprintf($date_pattern, $year, $month, $i);
	}

	return $ret_array;
}

// --------------------------------------------------------------------

function is_holiday($datestr)
{
	$weekday_index = format_date_to_pattern($datestr, "w");

	if ($weekday_index == 0
	or $weekday_index == 6)
	{
		return TRUE;
	}

	$formatted_str = format_date_to_pattern($datestr, "Y-m-d");

	//グローバル変数である$JAPAN_HOLIDAY_ARRAYに存在すればTRUE
	if (array_key_exists($formatted_str, $GLOBALS['JAPAN_HOLIDAY_ARRAY'] ))
	{
		return TRUE;
	}

	return FALSE;
}
